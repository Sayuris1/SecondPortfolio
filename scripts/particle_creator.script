local rendy = require "rendy.rendy"
local utils = require "scripts.utils"


local function create_particle(spawn_pos, aim_pos, left_right, factory_url, particle_table)
	local id = factory.create(factory_url, spawn_pos, nil, nil, vmath.vector3(0.01))
	particle_table[id] = {v = vmath.vector3(15 * left_right, math.random(-15, 15), 0), a = vmath.vector3(0), t = 0, aim_pos = aim_pos}
end


local base_url
local factory_base_url
local factory_pull_url
function init(self)
	go.property("delta_threshold", 50)
	go.property("spawn_spread_time", 0.2)
	self.particles = {} -- {id1 = {speed, dspeed} }

	self.current_delta_threshold = self.delta_threshold

	factory_base_url = msg.url("#factory_base")
	factory_pull_url = msg.url("#factory_pull")

	base_url = msg.url("/base")

	msg.post(".", "acquire_input_focus")
end

function update(self, dt)
	for id, values in pairs(self.particles) do
		local pos = go.get_position(id)
 		if values.t < self.spawn_spread_time then
			values.v = vmath.lerp(values.t / self.spawn_spread_time, values.v, vmath.vector3(1, 0, 0))

			local newPos = pos + values.v * dt
			go.set_position(newPos, id)
		else
			values.a = vmath.lerp(0.5, vmath.normalize(values.aim_pos - pos) * 4000 / vmath.length_sqr(values.aim_pos - pos), values.a)

			values.v = values.v + values.a * dt

			local delta_pos = values.v * dt
			if vmath.length_sqr(delta_pos) > 0.1 then
				delta_pos = vmath.normalize(delta_pos) * 0.1
			end

			local newPos = pos + delta_pos
			go.set_position(newPos, id)
		end

		values.t = values.t + dt
	end
end

local touch = hash("touch")
local camera_id = hash("/rendy")
function on_input(self, action_id, action)
	if action_id == touch then
		local move_speed = math.abs(action.screen_dx) + math.abs(action.screen_dy)
		self.current_delta_threshold = self.current_delta_threshold - move_speed

		if self.current_delta_threshold <= 0 then
			local pos = rendy.screen_to_world(camera_id, vmath.vector3(action.screen_x, action.screen_y, 15))
			pos.z = 0

			local dx_sign = utils.sign(action.screen_dx)
			create_particle(pos, go.get_position(base_url), dx_sign, factory_base_url, self.particles)

			self.current_delta_threshold = self.delta_threshold
		end
	end
end

local delete_particle = hash("delete_particle")
local create_particle_message = hash("create_particle")
function on_message(self, message_id, message, sender)
	if message_id == create_particle_message then
		create_particle(message.spawn_pos, message.aim_pos, message.left_rigt, factory_pull_url, self.particles)

	elseif message_id == delete_particle then

		self.particles[message.particle_id] = nil
		go.delete(message.particle_id)
	end
end