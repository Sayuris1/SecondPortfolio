local bz = require("scripts.bzLibrary")

--- Creates a rotation with the specified forward and upwards directions.
-- @param forward vector3 The forward direction.
-- @param upwards vector3|nil The upwards direction.
-- @return quat The rotation.
local function quat_look_rotation(forward, upwards)
    -- If no upwards direction is specified, use the default (0, 1, 0)
    upwards = upwards or vmath.vector3(0, 1, 0)

    -- No zero vectors
    if vmath.length_sqr(forward) < 0.0000000001 or vmath.length_sqr(upwards) < 0.0000000001 then
        return vmath.quat()
    end

--[[     -- Handle alignment with up direction
	pprint(vmath.dot(forward, upwards))
    if math.abs(vmath.dot(forward, upwards)) > 0.9999999 then
        return vmath.quat_from_to(vmath.vector3(0, 0, 1), forward)
    end ]]

    -- Create a rotation matrix from the forward and upwards vectors
    local matrix = vmath.matrix4_look_at(vmath.vector3(0), forward, upwards)

    -- Convert the matrix to a quaternion and return it
    return vmath.conj(vmath.quat_matrix4(matrix))
end

function init(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	go.set_rotation(quat_look_rotation(go.get_world_position("/planet") - go.get_world_position("/rendy/camera")), "/rendy/illumination")
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_state_move") then
		bz.animate({
			obj = "/rendy/operator",
			duration = 10.0,

			path={
				{x = -10, y = 5, z = -20},
				{x = 50, y = 20, z = 30},
				{x = 52, y = 20, z = 60},
				{x = 160, y = 100, z = -70},
			},

			easing = TYPE_OUTQUAD,
		})

		bz.animateSequence({
			obj = "/rendy/camera",
			is_rotate = true;

			segments={
				{ duration=3.5, path={
					{x = 37, y = 0, z = 0},
					{x = 30, y = -50, z = 0}, },

					easing = TYPE_OUTQUAD,
				},


				{ duration=6.5, path={
					{y = 50} },

					easing = TYPE_INQUAD,
				} },
		})

	elseif message_id == hash("motion_finished") then
--[[ 		local checkpoint1 = msg.url(nil, "/checkpoint1", nil)
		if message.checkpoint == checkpoint1 then
			local sequence = {
				msg.url("/checkpoint2"),
			}

			msg.post("/rendy/operator#operator", hash("follow_sequence"), sequence)
		end ]]
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
